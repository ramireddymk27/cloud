#chef cookbook
# Cookbook:: test
# Recipe:: default
 #create dir
 directory 'd:\apps' do
     action :create
 end
 directory 'd:\logfiles' do
     action :create
 end
 directory 'd:\apps\sequencegenerator' do
     action :create
 end
 directory 'd:\logfiles\sequencegenerator' do
     action :create
 end
 
  powershell_script "OpenPort_443" do
    code <<-EOH
    netsh advfirewall firewall add rule name="open port 443" dir=in action=allow protocol=TCP localport=443
    EOH
  end
  
  user 'ServerApp' do
    password "test$Password1Now"
    action :create
    notifies :run, "powershell_script[Grant log on as a service permission]", :immediately
 end
 
 #grant permission to run as a service
powershell_script "Grant log on as a service permission" do
  code <<-EOH
    $username = "vm\\ServerApp"    
    $tempPath = [System.IO.Path]::GetTempPath()
    $import = Join-Path -Path $tempPath -ChildPath "import.inf"
    if(Test-Path $import) { Remove-Item -Path $import -Force }
    $export = Join-Path -Path $tempPath -ChildPath "export.inf"
    if(Test-Path $export) { Remove-Item -Path $export -Force }
    $secedt = Join-Path -Path $tempPath -ChildPath "secedt.sdb"
    if(Test-Path $secedt) { Remove-Item -Path $secedt -Force }
    
    try {
        Write-Host ("Granting SeServiceLogonRight to user account: {0} on host: {1}." -f $username, $computerName)
        $sid = ((New-Object System.Security.Principal.NTAccount($username)).Translate([System.Security.Principal.SecurityIdentifier])).Value
        secedit /export /cfg $export
        $sids = (Select-String $export -Pattern "SeServiceLogonRight").Line
        
        foreach ($line in @("[Unicode]", "Unicode=yes", "[System Access]", "[Event Audit]", "[Registry Values]", "[Version]", "signature=`"`$CHICAGO$`"", "Revision=1", "[Profile Description]", "Description=GrantLogOnAsAService security template", "[Privilege Rights]", "SeServiceLogonRight = *$sids,*$sid")){
            Add-Content $import $line
        }
        
        secedit /import /db $secedt /cfg $import
        secedit /configure /db $secedt
        gpupdate /force
        Remove-Item -Path $import -Force
        Remove-Item -Path $export -Force
        Remove-Item -Path $secedt -Force
    } catch {
        Write-Host ("Failed to grant SeServiceLogonRight to user account: {0} on host: {1}." -f $username, $computerName)
        $error[0]
    }
  EOH
  action :nothing
end
  
  #install
 powershell_script 'Installing Sequence Generator' do
  code 'New-Service -Name "sequencegenerator" -BinaryPathName "d:\apps\sequencegenerator\sequencegenerator.exe -k netsvcs" -DisplayName "sequencegenerator" -StartupType Automatic'
 end


